"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { UsageHabitsSection } from "@/components/sections/usage-habits-section"
import { FeatureInterestSection } from "@/components/sections/feature-interest-section"
import { SatisfactionSection } from "@/components/sections/satisfaction-section"
import { OpenFeedbackSection } from "@/components/sections/open-feedback-section"
import { DemographicsSection } from "@/components/sections/demographics-section"
import { getSupabaseBrowserClient } from "@/lib/supabase/client"
import { toast } from "sonner"

interface SurveyFormProps {
  onComplete: () => void
}

export function SurveyForm({ onComplete }: SurveyFormProps) {
  const supabase = getSupabaseBrowserClient()
  const [currentSection, setCurrentSection] = useState(0)
  const [formData, setFormData] = useState({
    // Usage & Habits
    visitFrequency: "",
    timePerVisit: "",
    preferredTime: "",

    // Feature Interest
    dailyPrompts: 3,
    weeklyThemes: 3,
    anonymousSharing: 3,
    expertQA: 3,
    featureRanking: [] as string[],

    // Satisfaction
    overallSatisfaction: 3,
    supportLevel: 3,
    calmness: 3,

    // Open Feedback
    dailyMotivation: "",
    newIdeas: "",
    improvements: "",

    // Demographics
    ageRange: "",
    timeZone: "",
    hearAboutUs: "",
    email: "",
  })

  const sections = [
    { title: "Usage & Habits", component: UsageHabitsSection },
    { title: "Feature Interest", component: FeatureInterestSection },
    { title: "Satisfaction", component: SatisfactionSection },
    { title: "Open Feedback", component: OpenFeedbackSection },
    { title: "Demographics", component: DemographicsSection },
  ]

  const progress = ((currentSection + 1) / sections.length) * 100

  const handleNext = async () => {
    if (currentSection < sections.length - 1) {
      setCurrentSection(currentSection + 1)
    } else {
      // Submit form
      console.log("Survey completed:", formData)
      /*
      {
    "visitFrequency": "several-weekly",
    "timePerVisit": "10+",
    "preferredTime": "afternoon",
    "dailyPrompts": 2,
    "weeklyThemes": 4,
    "anonymousSharing": 3,
    "expertQA": 3,
    "featureRanking": [],
    "overallSatisfaction": 3,
    "supportLevel": 3,
    "calmness": 2,
    "dailyMotivation": "",
    "newIdeas": "",
    "improvements": "",
    "ageRange": "",
    "timeZone": "",
    "hearAboutUs": "Social media",
    "email": ""
}
      
      */

/*
supabase schema

create table public.surveys (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone null default now(),
  visit_frequency text null,
  time_per_visit text null,
  preferred_time text null,
  daily_prompts integer null,
  weekly_themes integer null,
  anonymous_sharing integer null,
  expert_qa integer null,
  feature_ranking text[] null,
  overall_satisfaction integer null,
  support_level integer null,
  calmness integer null,
  daily_motivation text null,
  new_ideas text null,
  improvements text null,
  age_range text null,
  time_zone text null,
  hear_about_us text null,
  email text null,
  constraint surveys_pkey primary key (id)
) TABLESPACE pg_default;
*/

if (formData.visitFrequency === "" && formData.timePerVisit === "" && formData.preferredTime === "" && 
  formData.dailyPrompts === 3 && formData.weeklyThemes === 3 && formData.anonymousSharing === 3 && formData.expertQA === 3 
  && formData.featureRanking.length === 0 && formData.overallSatisfaction === 3 && formData.supportLevel === 3 && formData.calmness === 3 && 
  formData.dailyMotivation === "" && formData.newIdeas === "" && formData.improvements === "" && formData.ageRange === "" &&
  formData.timeZone === "" && formData.hearAboutUs === "" && formData.email === "") {
  toast("EeermðŸ¥¶ nothing seems to be filled out. Please take the survey before submitting.ðŸ˜…")
  return
}

      const { data, error } = await supabase.from('surveys').insert({
        visit_frequency: formData.visitFrequency,
        time_per_visit: formData.timePerVisit,
        preferred_time: formData.preferredTime,
        daily_prompts: formData.dailyPrompts,
        weekly_themes: formData.weeklyThemes,
        anonymous_sharing: formData.anonymousSharing,
        expert_qa: formData.expertQA,
        feature_ranking: formData.featureRanking,
        overall_satisfaction: formData.overallSatisfaction,
        support_level: formData.supportLevel,
        calmness: formData.calmness,
        daily_motivation: formData.dailyMotivation,
        new_ideas: formData.newIdeas,
        improvements: formData.improvements,
        age_range: formData.ageRange,
        time_zone: formData.timeZone,
        hear_about_us: formData.hearAboutUs,
        email: formData.email,
      })

      if (error) {
        console.error('Error submitting survey:', error)
        return
      }

      console.log('Survey submitted successfully:', data)

      onComplete()
    }
  }

  const handlePrevious = () => {
    if (currentSection > 0) {
      setCurrentSection(currentSection - 1)
    }
  }

  const updateFormData = (updates: Partial<typeof formData>) => {
    setFormData((prev) => ({ ...prev, ...updates }))
  }

  const CurrentSectionComponent = sections[currentSection].component

  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <div className="max-w-4xl w-full">
        {/* Progress Header */}
        <div className="backdrop-blur-xl bg-white/20 dark:bg-gray-800/20 rounded-t-3xl border border-white/30 dark:border-gray-700/30 border-b-0 p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200">{sections[currentSection].title}</h2>
            <span className="text-sm text-gray-600 dark:text-gray-400">
              {currentSection + 1} of {sections.length}
            </span>
          </div>

          <Progress value={progress} className="h-2" />
          <p className="text-xs text-rose-600 dark:text-rose-400">
            Note: This survey is anonymous and no question is required. But we plead for you to take a moment to share your thoughts and feedback.
          </p>          
        </div>

        {/* Form Content */}
        <div className="backdrop-blur-xl bg-white/20 dark:bg-gray-800/20 rounded-b-3xl border border-white/30 dark:border-gray-700/30 border-t-0 shadow-2xl p-6 md:p-8">
          <CurrentSectionComponent data={formData} updateData={updateFormData} />

          {/* Navigation */}
          <div className="flex justify-between items-center mt-8 pt-6 border-t border-white/20 dark:border-gray-700/20">
            <Button
              variant="ghost"
              onClick={handlePrevious}
              disabled={currentSection === 0}
              className="flex items-center gap-2"
            >
              <ChevronLeft className="w-4 h-4" />
              Previous
            </Button>

            <Button
              onClick={handleNext}
              className="bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white flex items-center gap-2"
            >
              {currentSection === sections.length - 1 ? "Complete Survey" : "Next"}
              {currentSection < sections.length - 1 && <ChevronRight className="w-4 h-4" />}
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
